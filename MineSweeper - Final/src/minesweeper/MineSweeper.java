/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package minesweeper;

import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Random;
import java.util.TreeSet;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Rahul
 */
public class MineSweeper extends javax.swing.JFrame {

    /**
     * Creates new form MineSweeper
     */
    
    Tile [][]tiles;
    TreeSet<Integer> mineSet = new TreeSet<>();
    int [] direction = new int[]{-1,0,1};
    boolean firstClick = true;
    int remainingFlags = 10;
    int remainingTiles = 54;
    int dimension = 8;
    int mineCount;
    boolean stateChanged;
    int defaultState = 8;
        
     public MineSweeper(int dimension) {
        this.dimension = dimension;
        initComponents();
        initVariables();
        myInitComponents();
        lblRemaingFlags.setText("Remaining Flags : "+remainingFlags);
        setSize(600, 500);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        card2 = new javax.swing.JPanel();
        panTilesHolder = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        lblRemaingFlags = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panTilesHolder.setLayout(new java.awt.GridLayout(8, 8));

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("change settings");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout card2Layout = new javax.swing.GroupLayout(card2);
        card2.setLayout(card2Layout);
        card2Layout.setHorizontalGroup(
            card2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card2Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jButton1)
                .addGap(45, 45, 45)
                .addComponent(lblRemaingFlags, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(43, 43, 43))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, card2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panTilesHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        card2Layout.setVerticalGroup(
            card2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, card2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(card2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(card2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblRemaingFlags, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panTilesHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<dimension;i++){
            for(int j=0;j<dimension;j++){
                tiles[i][j].setEnabled(true);
                tiles[i][j].setText("");
                tiles[i][j].setIcon(null);
                tiles[i][j].setFlag(false);
            }
        }
        mineSet.removeAll(mineSet);
        initVariables();
        lblRemaingFlags.setText("Remaining Flags : "+remainingFlags);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new SettingsFrame(this, dimension).setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MineSweeper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MineSweeper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MineSweeper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MineSweeper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MineSweeper(8).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel card2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel lblRemaingFlags;
    private javax.swing.JPanel panTilesHolder;
    // End of variables declaration//GEN-END:variables

    private void myInitComponents() {
        panTilesHolder.setLayout(new GridLayout(dimension, dimension));
        tiles = new Tile[dimension][dimension];
        for(int i=0;i<dimension;i++){
            for(int j=0;j<dimension;j++){
                tiles[i][j] = new Tile(i,j);
                tiles[i][j].addMouseListener(new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if(((Tile)e.getSource()).isEnabled()){
                            if(SwingUtilities.isRightMouseButton(e))
                                putFlag((Tile)e.getSource());
                            else
                                handleInputOnTiles((Tile)e.getSource());
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {
                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
                        
                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {
                        
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        
                    }
                });
                panTilesHolder.add(tiles[i][j]);
            }
        }
    }
    
    private void putFlag(Tile tile) {
        if(tile.isFlagged() && remainingFlags < mineCount){
            tile.setIcon(null);
            remainingFlags++;
            tile.setFlag(false);
        } else if(!tile.isFlagged() && remainingFlags > 0){
            tile.setIcon(new ImageIcon(getClass().getResource("/minesweeper/flag.png")));
            remainingFlags--;
            tile.setFlag(true);
        }
        lblRemaingFlags.setText("Remaing Flags : "+remainingFlags);
    }
    
    public void handleInputOnTiles(Tile btn){
        if(btn.isFlagged())
            return;
        int tileNum;
        if(firstClick){
            firstClick = !firstClick;
            Random rand = new Random();
            int[] pos = btn.getPos();
            int nullmine = getPos64Based(pos[0], pos[1]);
            mineSet.add(nullmine);
            mineSet.add(0);
            while(mineSet.size() < 2 + mineCount){
                mineSet.add((int)(rand.nextDouble() * dimension * dimension));
            }
            mineSet.remove(nullmine);
            mineSet.remove(0);
            System.out.println(mineSet);
            setTileNumbers();
        }
        tileNum = btn.getTileNumber();
        if(tileNum < 0)
            btn.setIcon(new ImageIcon(getClass().getResource("/minesweeper/mine.png")));
        else if(tileNum == 0)
            btn.setText("");
        else{
            btn.setText(String.valueOf(tileNum));
        }
        btn.setEnabled(false);
        remainingTiles--;
        if(tileNum < 0){
            remainingTiles++;
            JOptionPane.showMessageDialog(this, "You Lost");
            for(int i=0;i<dimension;i++){
                for(int j=0;j<dimension;j++){
                    if(tiles[i][j].getTileNumber() == -1)
                        tiles[i][j].setIcon(new ImageIcon(getClass().getResource("/minesweeper/mine.png")));
                    tiles[i][j].setEnabled(false);
                }
            }
        } else if(tileNum == 0) {
            int x = btn.getPos()[0];
            int y = btn.getPos()[1];
            for(int i=0;i<3;i++) {
                for(int j=0;j<3;j++){
                    if(i==j && j==1)
                        continue;
                    int spareX = x + direction[i];
                    if(spareX < 0 || spareX >= dimension)
                        continue;
                    int spareY = y + direction[j];
                    if(spareY<0 || spareY >= dimension)
                        continue;
                    if(tiles[spareX][spareY].isEnabled())
                        handleInputOnTiles(tiles[spareX][spareY]);
                }
            }
        }
        if(remainingTiles <= 0){
            remainingTiles++;
            JOptionPane.showMessageDialog(this, "You Won!");
            for(int i :mineSet){
                int[] dim = getPos(i);
                tiles[dim[0]][dim[1]].setIcon(new ImageIcon(getClass().getResource("/minesweeper/flag.png")));
                tiles[dim[0]][dim[1]].setEnabled(false);
            }
            remainingFlags = 0;
            lblRemaingFlags.setText("Remaining Flags : "+remainingFlags);
        }
    }
    
    public int getPos64Based(int x, int y){
        return (x*dimension)+y+1;
    }
    
    public int[] getPos(int pos){
        pos -= 1;
        return (new int[]{pos/dimension,pos%dimension});
    }

    private void setTileNumbers() {
        for(int i=0;i<dimension;i++) {
            for(int j=0;j<dimension;j++) {
                tiles[i][j].setTileNumber(calcSurroundingMines(i, j));
            }
        }
    }
    
    private int calcSurroundingMines(int x, int y){
        if(mineSet.contains(getPos64Based(x, y)))
            return -1;
        int counter = 0;
        for(int i=0;i<3;i++) {
            for(int j=0;j<3;j++){
                if(i==j && j==1)
                    continue;
                int spareX = x + direction[i];
                if(spareX < 0 || spareX >= dimension)
                    continue;
                int spareY = y + direction[j];
                if(spareY < 0 || spareY >= dimension)
                    continue;
                int num = getPos64Based(spareX, spareY);
                if(mineSet.contains(num))
                    counter++;
            }
        }
        return counter;
    }
    
     private void initVariables() {
        firstClick = true;
        mineCount = (dimension * dimension * 10) / 64;
        remainingFlags = mineCount;
        remainingTiles = (dimension * dimension) - mineCount;
    }
}